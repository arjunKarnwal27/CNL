import qupath.lib.objects.PathObjects
import qupath.lib.regions.RegionRequest
import qupath.lib.roi.ROIs
import qupath.lib.roi.RoiTools
import qupath.lib.roi.RectangleROI

def server = getCurrentServer()
def path = server.getPath()

double downsample = 1.0

// Read the whole image
def metadata = server.getMetadata()
int x = 0
int y = 7300
int width = 13000
int height = 400

def request = RegionRequest.createInstance(path, downsample, x, y, width, height)
def img = server.readRegion(request)
print img

// Store regions of non-black pixels
def nonBlackRegions = []

for (int y = 0; y < img.getHeight(); y++) {
    for (int x = 0; x < img.getWidth(); x++) {
        def rgb = img.getRGB(x, y)
        if (rgb != -16777216) {
            nonBlackRegions.add(new RectangleROI((double) x, (double) y + 7300, 1, 1, getCurrentViewer().getImagePlane()))
        }
    }
}

// Combine all non-black regions into a single ROI
def combinedROI = null
nonBlackRegions.each { roi ->
    if (combinedROI == null) {
        combinedROI = roi
    } else {
        combinedROI = RoiTools.combineROIs(combinedROI, roi, RoiTools.CombineOp.ADD)
    }
}

if (combinedROI != null) {
    def annotation = PathObjects.createAnnotationObject(combinedROI)
    
    def hierarchy = getCurrentHierarchy()
    hierarchy.addPathObject(annotation)
    
    selectObjects(annotation)
}

def result = runPlugin('qupath.opencv.CellCountsCV', '{"gaussianSigmaPixels":3.5,"backgroundRadiusPixels":60.0,"doDoG":true,"threshold":1.0,"ensureMainStain":false,"detectionDiameter":1.0}')
